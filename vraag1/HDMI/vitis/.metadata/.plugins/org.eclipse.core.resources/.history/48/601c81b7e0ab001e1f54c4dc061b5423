#include "xparameters.h"
#include "FreeRTOS.h"
#include "task.h"
#include "xaxivdma.h"
#include "xscugic.h"
#include "sleep.h"
#include <stdlib.h>
#include "xil_cache.h"
#include "xil_cache.h"

#define HSize 1920
#define VSize 1080
#define FrameSize HSize*VSize*3

const int vierOpEenRij = 4;
const int CellWidth = HSize / vierOpEenRij;
const int CellHeight = VSize / vierOpEenRij;

static XScuGic Intc;

static int SetupIntrSystem(XAxiVdma *AxiVdmaPtr, u16 ReadIntrId);
void drawGrid(unsigned char* buffer);
void updateStartPosition();
void drawToken(unsigned char* buffer);
void WinOrNot(unsigned char* buffer);
void drawWinningSquare(unsigned char* buffer, int color);

unsigned char Buffer[FrameSize];
unsigned char TempBuffer[FrameSize];

int CheckRooster[4] = {0, 0, 0, 0};
int WinnerCheck[17];
int positionPlayer1 = 0;
int positionPlayer2 = 0;

int main(){
	int status;
	int Index;

	u32 Addr;
	XAxiVdma myVDMA;
	XAxiVdma_Config *config = XAxiVdma_LookupConfig(XPAR_AXI_VDMA_0_DEVICE_ID);
	XAxiVdma_DmaSetup ReadCfg;
	status = XAxiVdma_CfgInitialize(&myVDMA, config, config->BaseAddress);
    if(status != XST_SUCCESS){
    	xil_printf("DMA Initialization failed");
    }
    ReadCfg.VertSizeInput = VSize;
    ReadCfg.HoriSizeInput = HSize*3;
    ReadCfg.Stride = HSize*3;
    ReadCfg.FrameDelay = 0;
    ReadCfg.EnableCircularBuf = 1;
    ReadCfg.EnableSync = 1;
    ReadCfg.PointNum = 0;
    ReadCfg.EnableFrameCounter = 0;
    ReadCfg.FixedFrameStoreAddr = 0;
    status = XAxiVdma_DmaConfig(&myVDMA, XAXIVDMA_READ, &ReadCfg);
    if (status != XST_SUCCESS) {
    	xil_printf("Write channel config failed %d\r\n", status);
    	return status;
    }

    Addr = (u32)&(Buffer[0]);

	for(Index = 0; Index < myVDMA.MaxNumFrames; Index++) {
		ReadCfg.FrameStoreStartAddr[Index] = Addr;
		Addr +=  FrameSize;
	}

	status = XAxiVdma_DmaSetBufferAddr(&myVDMA, XAXIVDMA_READ,ReadCfg.FrameStoreStartAddr);
	if (status != XST_SUCCESS) {
		xil_printf("Read channel set buffer address failed %d\r\n", status);
		return XST_FAILURE;
	}

	XAxiVdma_IntrEnable(&myVDMA, XAXIVDMA_IXR_COMPLETION_MASK, XAXIVDMA_READ);

	SetupIntrSystem(&myVDMA, XPAR_FABRIC_AXI_VDMA_0_MM2S_INTROUT_INTR);

	drawGrid(Buffer);

    xTaskCreate(DrawTokenTask, "DrawTokenTask", configMINIMAL_STACK_SIZE, (void *)Buffer, tskIDLE_PRIORITY + 1, NULL);
	vTaskDelay(pdMS_TO_TICKS(5000));

	positionPlayer1 = 3;
	positionPlayer2 = 2;
	drawToken(Buffer);

	vTaskDelay(pdMS_TO_TICKS(1000));

	positionPlayer1 = 1;
	positionPlayer2 = 1;
	drawToken(Buffer);

	vTaskDelay(pdMS_TO_TICKS(1000));

	positionPlayer1 = 1;
	positionPlayer2 = 0;
	drawToken(Buffer);

	vTaskDelay(pdMS_TO_TICKS(1000));

	positionPlayer1 = 2;
	positionPlayer2 = 2;
	drawToken(Buffer);

	vTaskDelay(pdMS_TO_TICKS(1000));

	positionPlayer1 = 3;
	positionPlayer2 = 0;
	drawToken(Buffer);

	vTaskDelay(pdMS_TO_TICKS(1000));

	positionPlayer1 = 3;
	positionPlayer2 = 3;
	drawToken(Buffer);

	vTaskDelay(pdMS_TO_TICKS(1000));

	Xil_DCacheFlush();

	status = XAxiVdma_DmaStart(&myVDMA,XAXIVDMA_READ);
	if (status != XST_SUCCESS) {
		if(status == XST_VDMA_MISMATCH_ERROR)
			xil_printf("DMA Mismatch Error\r\n");
		return XST_FAILURE;
	}

    while(1){
    }
}


/*****************************************************************************/
 /* Call back function for read channel
******************************************************************************/

static void ReadCallBack(void *CallbackRef, u32 Mask)
{

	//static int i=0;
	/* User can add his code in this call back function */
	/*
	xil_printf("Read Call back function is called\r\n");
	if(i==0){
		memset(Buffer,0x00,FrameSize);
		i=1;
	}
	else{
		memset(Buffer,0xff,FrameSize);
		i=0;
	}
	Xil_DCacheFlush();
	sleep(1);
	*/
}

/*****************************************************************************/
/*
 * The user can put his code that should get executed when this
 * call back happens.
 *
*
******************************************************************************/
static void ReadErrorCallBack(void *CallbackRef, u32 Mask)
{
	/* User can add his code in this call back function */
	xil_printf("Read Call back Error function is called\r\n");

}


static int SetupIntrSystem(XAxiVdma *AxiVdmaPtr, u16 ReadIntrId)
{
	int Status;
	XScuGic *IntcInstancePtr =&Intc;

	/* Initialize the interrupt controller and connect the ISRs */
	XScuGic_Config *IntcConfig;
	IntcConfig = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
	Status =  XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);
	if(Status != XST_SUCCESS){
		xil_printf("Interrupt controller initialization failed..");
		return -1;
	}

	Status = XScuGic_Connect(IntcInstancePtr,ReadIntrId,(Xil_InterruptHandler)XAxiVdma_ReadIntrHandler,(void *)AxiVdmaPtr);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed read channel connect intc %d\r\n", Status);
		return XST_FAILURE;
	}

	XScuGic_Enable(IntcInstancePtr,ReadIntrId);

	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,(Xil_ExceptionHandler)XScuGic_InterruptHandler,(void *)IntcInstancePtr);
	Xil_ExceptionEnable();

	/* Register call-back functions
	 */
	XAxiVdma_SetCallBack(AxiVdmaPtr, XAXIVDMA_HANDLER_GENERAL, ReadCallBack, (void *)AxiVdmaPtr, XAXIVDMA_READ);

	XAxiVdma_SetCallBack(AxiVdmaPtr, XAXIVDMA_HANDLER_ERROR, ReadErrorCallBack, (void *)AxiVdmaPtr, XAXIVDMA_READ);

	return XST_SUCCESS;
}

void drawGrid(unsigned char* buffer) {

	memcpy(TempBuffer, buffer, FrameSize);
    // Vul de buffer met wit
    for (int i = 0; i < VSize; ++i) {
        for (int j = 0; j < HSize * 3; j = j + 3) {
        	TempBuffer[(i * HSize * 3) + j] = 0xff;     // G
            TempBuffer[(i * HSize * 3) + j + 1] = 0xff; // B
            TempBuffer[(i * HSize * 3) + j + 2] = 0xff; // R
        }
    }

    // Teken horizontale lijnen
    for (int i = 1; i <= vierOpEenRij - 1; ++i) {
        int yPos = i * CellHeight - 5; // Aanpassen voor centrering van de lijn
        for (int j = 0; j < HSize * 3; j = j + 3) {
        	TempBuffer[(yPos * HSize * 3) + j] = 0x00;     // G (zwart)
        	TempBuffer[(yPos * HSize * 3) + j + 1] = 0x00; // B (zwart)
        	TempBuffer[(yPos * HSize * 3) + j + 2] = 0x00; // R (zwart)
        }
    }

    // Teken verticale lijnen
    for (int i = 1; i <= vierOpEenRij - 1; ++i) {
        int xPos = i * CellWidth - 5; // Aanpassen voor centrering van de lijn
        for (int j = 0; j < VSize; ++j) {
        	TempBuffer[(j * HSize * 3) + (xPos * 3)] = 0x00;     // G (zwart)
        	TempBuffer[(j * HSize * 3) + (xPos * 3) + 1] = 0x00; // B (zwart)
        	TempBuffer[(j * HSize * 3) + (xPos * 3) + 2] = 0x00; // R (zwart)
        }
    }
    memcpy(buffer, TempBuffer, FrameSize);

}

void drawToken(unsigned char* buffer) {

    memcpy(TempBuffer, buffer, FrameSize);

	updateStartPosition();

    // Teken de token voor op de positie van speler 1
    int xStartX = (positionPlayer1 % vierOpEenRij) * CellWidth;
    int yStartX = (positionPlayer1 / vierOpEenRij) * CellHeight;
    int halfCellWidthX = CellWidth / 2;
    int halfCellHeightX = CellHeight / 2;
    int startX_X = xStartX + (CellWidth - halfCellWidthX) / 2;
    int startY_X = yStartX + (CellHeight - halfCellHeightX) / 2;
    for (int i = 0; i < halfCellHeightX; ++i) {
        for (int j = 0; j < halfCellWidthX; ++j) {
            int bufferIndex = ((startY_X + i) * HSize + (startX_X + j)) * 3;
            TempBuffer[bufferIndex] = 0xff;     // G (zwart)
            TempBuffer[bufferIndex + 1] = 0x00; // B (zwart)
            TempBuffer[bufferIndex + 2] = 0xff; // R (zwart)
        }
    }

    // Teken de token voor op de positie van speler 2
    int xStartO = (positionPlayer2 % vierOpEenRij) * CellWidth;
    int yStartO = (positionPlayer2 / vierOpEenRij) * CellHeight;
    int halfCellWidthO = CellWidth / 2;
    int halfCellHeightO = CellHeight / 2;
    int startX_O = xStartO + (CellWidth - halfCellWidthO) / 2;
    int startY_O = yStartO + (CellHeight - halfCellHeightO) / 2;
    for (int i = 0; i < halfCellHeightO; ++i) {
        for (int j = 0; j < halfCellWidthO; ++j) {
            int bufferIndex = ((startY_O + i) * HSize + (startX_O + j)) * 3;
            TempBuffer[bufferIndex] = 0x00;     // G (zwart)
            TempBuffer[bufferIndex + 1] = 0x00; // B (zwart)
            TempBuffer[bufferIndex + 2] = 0xff; // R (zwart)
        }
    }

    WinnerCheck[positionPlayer1]=1;
    WinnerCheck[positionPlayer2]=2;
    WinOrNot(TempBuffer);

    memcpy(buffer, TempBuffer, FrameSize);

}

void updateStartPosition() {
    if (positionPlayer1 >= 0 && positionPlayer1 < 4) {
        if (CheckRooster[positionPlayer1] == 0) {
        	CheckRooster[positionPlayer1] += 1;
        	positionPlayer1 +=12;
        }
        else if (CheckRooster[positionPlayer1] == 1) {
        	CheckRooster[positionPlayer1] += 1;
        	positionPlayer1 +=8;
        }
        else if (CheckRooster[positionPlayer1] == 2) {
        	CheckRooster[positionPlayer1] += 1;
        	positionPlayer1 +=4;
        }
        else if (CheckRooster[positionPlayer1] == 3) {
        	CheckRooster[positionPlayer1] += 1;
        	//waarde blijft 0
        }
        else{
        	xil_printf("value must be 0 till 3, value is now:%d\r\n", positionPlayer1);
        }
    }

    if (positionPlayer2 >= 0 && positionPlayer2 < 4) {
        if (CheckRooster[positionPlayer2] == 0) {
        	CheckRooster[positionPlayer2] += 1;
        	positionPlayer2 +=12;
        }
        else if (CheckRooster[positionPlayer2] == 1) {
        	CheckRooster[positionPlayer2] += 1;
        	positionPlayer2 +=8;
        }
        else if (CheckRooster[positionPlayer2] == 2) {
        	CheckRooster[positionPlayer2] += 1;
        	positionPlayer2 +=4;
        }
        else if (CheckRooster[positionPlayer2] == 3) {
        	CheckRooster[positionPlayer2] += 1;
        	//waarde blijft 0
        }
        else{
        	xil_printf("value must be 0 till 3, value is now:%d\r\n", positionPlayer2);
        }
    }
}

void WinOrNot(unsigned char* TempBuffer) {

	//check alle horizontale lijnen player1
	for (int i = 0; i <= 12; i+=4) {
		if (WinnerCheck[i]==1 && WinnerCheck[i+1] ==1 && WinnerCheck[i+2]==1 && WinnerCheck[i+3]==1){
			WinnerCheck[16] = 1;
		}
	}
	//check alle horizontale lijnen player2
	for (int i = 0; i <= 12; i+=4) {
		if (WinnerCheck[i]==2 && WinnerCheck[i+1] ==2 && WinnerCheck[i+2]==2 && WinnerCheck[i+3]==2){
			WinnerCheck[16] = 2;
		}
	}
	//check alle verticale lijnen player1
	for (int i = 0; i <= 4; i++) {
		if (WinnerCheck[i]==1 && WinnerCheck[i+4] ==1 && WinnerCheck[i+8]==1 && WinnerCheck[i+12]==1){
			WinnerCheck[16] = 1;
		}
	}
	//check alle verticale lijnen player2
	for (int i = 0; i <= 4; i++) {
		if (WinnerCheck[i]==2 && WinnerCheck[i+4] ==2 && WinnerCheck[i+8]==2 && WinnerCheck[i+12]==2){
			WinnerCheck[16] = 2;
		}
	}
	//diagonaal
	if (WinnerCheck[0] == 1 && WinnerCheck[5] == 1 && WinnerCheck[10] == 1 && WinnerCheck[15] == 1 ){
		WinnerCheck[16] = 1;
	}
	if (WinnerCheck[0] == 2 && WinnerCheck[5] == 2 && WinnerCheck[10] == 2 && WinnerCheck[15] == 2 ){
		WinnerCheck[16] = 2;
	}
	if (WinnerCheck[3] == 1 && WinnerCheck[6] == 1 && WinnerCheck[9] == 1 && WinnerCheck[12] == 1 ){
		WinnerCheck[16] = 1;
	}
	if (WinnerCheck[3] == 2 && WinnerCheck[6] == 2 && WinnerCheck[9] == 2 && WinnerCheck[12] == 2 ){
		WinnerCheck[16] = 2;
	}

	if (WinnerCheck[16] == 1){
		xil_printf("winner is player 1\r\n");
		drawWinningSquare(TempBuffer, 1);
	}
	if (WinnerCheck[16] == 2){
		xil_printf("winner is player 2\r\n");
		drawWinningSquare(TempBuffer, 2);
	}
}

void drawWinningSquare(unsigned char* buffer, int color) {

	memcpy(TempBuffer, buffer, FrameSize);

    int centerX = HSize / 2;
    int centerY = VSize / 2;
    int squareSize = 10; // Startgrootte van het vierkant


    // Loop om het vierkant te tekenen en te laten groeien
    for (int size = squareSize; size < 100; size += 5) {
        for (int i = -size / 2; i < size / 2; ++i) {
            for (int j = -size / 2; j < size / 2; ++j) {
                int x = centerX + i;
                int y = centerY + j;
                if (x >= 0 && x < HSize && y >= 0 && y < VSize) {
                    int bufferIndex = (y * HSize + x) * 3;
                    if (color == 1) {
                        // Geel vierkant
                    	TempBuffer[bufferIndex] = 0xff;     // G
                        TempBuffer[bufferIndex + 1] = 0xff; // B
                        TempBuffer[bufferIndex + 2] = 0x00; // R
                    } else {
                        // Rood vierkant
                    	TempBuffer[bufferIndex] = 0x00;     // G
                    	TempBuffer[bufferIndex + 1] = 0x00; // B
                    	TempBuffer[bufferIndex + 2] = 0xff; // R
                    }
                }
            }
        }
        // Kopieer het buffer naar het scherm na elke verandering
        // Hier kun je eventueel een kleine vertraging toevoegen
        memcpy(Buffer, buffer, FrameSize);
        // Ververs het scherm
        Xil_DCacheFlush();
    }
}

