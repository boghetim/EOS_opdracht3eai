#include <sleep.h>
#include "netif/xadapter.h"
#include "platform_config.h"
#include "xil_printf.h"
#include "lwip/init.h"
#include "lwip/inet.h"

#include "xparameters.h"
#include "FreeRTOS.h"
#include "task.h"
#include "xaxivdma.h"
#include "xscugic.h"
#include <stdlib.h>
#include "xil_cache.h"
#include "xil_cache.h"

#include "queue.h"

/* -----  HDMI GAME ------ */
#define HSize 1920
#define VSize 1080
#define FrameSize HSize*VSize*3

const int vierOpEenRij = 4;
const int CellWidth = HSize / vierOpEenRij;
const int CellHeight = VSize / vierOpEenRij;

static XScuGic Intc;

unsigned char Buffer[FrameSize];
unsigned char TempBuffer[FrameSize];

int CheckRooster[4] = {0, 0, 0, 0};
int WinnerCheck[17];
int positionPlayer1 = 0;
int positionPlayer2 = 0;

/*----------------------------- */

QueueHandle_t udp_control;


#if LWIP_DHCP==1
#include "lwip/dhcp.h"
extern volatile int dhcp_timoutcntr;
err_t dhcp_start(struct netif *netif);
#endif

#ifdef XPS_BOARD_ZCU102
#ifdef XPAR_XIICPS_0_DEVICE_ID
int IicPhyReset(void);
#endif
#endif

static int complete_nw_thread;


void print_app_header();
void start_application();

#define THREAD_STACKSIZE 1024

#define DEFAULT_IP_ADDRESS "192.168.0.10"
#define DEFAULT_IP_MASK "255.255.255.0"
#define DEFAULT_GW_ADDRESS "192.168.1.1"

struct netif server_netif;

unsigned char udp_msg[1500];

static void print_ip(char *msg, ip_addr_t *ip);
static void print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw);
static void assign_default_ip(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw);
void network_thread(void *p);
int main_thread();

/* HDMI -------- */
static void ReadCallBack(void *CallbackRef, u32 Mask);
static void ReadErrorCallBack(void *CallbackRef, u32 Mask);
static int SetupIntrSystem(XAxiVdma *AxiVdmaPtr, u16 ReadIntrId);
void drawGrid(unsigned char* buffer);
void updateStartPosition();
void drawToken(unsigned char* buffer);
void WinOrNot(unsigned char* buffer);
void drawWinningSquare(unsigned char* buffer, int color);
void testQueue();

/*---------------*/


int main()
{
	udp_control = xQueueCreate(10, sizeof(char[1500]));
	int status;
	int Index;

	u32 Addr;
	XAxiVdma myVDMA;
	XAxiVdma_Config *config = XAxiVdma_LookupConfig(XPAR_AXI_VDMA_0_DEVICE_ID);
	XAxiVdma_DmaSetup ReadCfg;
	status = XAxiVdma_CfgInitialize(&myVDMA, config, config->BaseAddress);
	if(status != XST_SUCCESS){
		xil_printf("DMA Initialization failed");
	}
	ReadCfg.VertSizeInput = VSize;
	ReadCfg.HoriSizeInput = HSize*3;
	ReadCfg.Stride = HSize*3;
	ReadCfg.FrameDelay = 0;
	ReadCfg.EnableCircularBuf = 1;
	ReadCfg.EnableSync = 1;
	ReadCfg.PointNum = 0;
	ReadCfg.EnableFrameCounter = 0;
	ReadCfg.FixedFrameStoreAddr = 0;
	 status = XAxiVdma_DmaConfig(&myVDMA, XAXIVDMA_READ, &ReadCfg);
	if (status != XST_SUCCESS) {
		xil_printf("Write channel config failed %d\r\n", status);
		return status;
	}

	Addr = (u32)&(Buffer[0]);

	for(Index = 0; Index < myVDMA.MaxNumFrames; Index++) {
		ReadCfg.FrameStoreStartAddr[Index] = Addr;
		Addr +=  FrameSize;
	}

	status = XAxiVdma_DmaSetBufferAddr(&myVDMA, XAXIVDMA_READ,ReadCfg.FrameStoreStartAddr);
	if (status != XST_SUCCESS) {
		xil_printf("Read channel set buffer address failed %d\r\n", status);
		return XST_FAILURE;
	}

	XAxiVdma_IntrEnable(&myVDMA, XAXIVDMA_IXR_COMPLETION_MASK, XAXIVDMA_READ);

	SetupIntrSystem(&myVDMA, XPAR_FABRIC_AXI_VDMA_0_MM2S_INTROUT_INTR);

	/********/
	//Xil_DCacheFlush();

	status = XAxiVdma_DmaStart(&myVDMA,XAXIVDMA_READ);
		if (status != XST_SUCCESS) {
			if(status == XST_VDMA_MISMATCH_ERROR)
				xil_printf("DMA Mismatch Error\r\n");
			return XST_FAILURE;
		}

	/* threads */

	sys_thread_new("main_thread", (void(*)(void*))main_thread, 0,
			THREAD_STACKSIZE, DEFAULT_THREAD_PRIO);

	sys_thread_new("test", (void(*)(void*))testQueue, 0,
			THREAD_STACKSIZE, DEFAULT_THREAD_PRIO);

	vTaskStartScheduler();

	while(1);
	return 0;
}

static void print_ip(char *msg, ip_addr_t *ip)
{
	xil_printf(msg);
	xil_printf("%d.%d.%d.%d\n\r", ip4_addr1(ip), ip4_addr2(ip),
				ip4_addr3(ip), ip4_addr4(ip));
}

static void print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{
	print_ip("Board IP:       ", ip);
	print_ip("Netmask :       ", mask);
	print_ip("Gateway :       ", gw);
}

static void assign_default_ip(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{
	int err;

	xil_printf("Configuring default IP %s \r\n", DEFAULT_IP_ADDRESS);

	err = inet_aton(DEFAULT_IP_ADDRESS, ip);
	if(!err)
		xil_printf("Invalid default IP address: %d\r\n", err);

	err = inet_aton(DEFAULT_IP_MASK, mask);
	if(!err)
		xil_printf("Invalid default IP MASK: %d\r\n", err);

	err = inet_aton(DEFAULT_GW_ADDRESS, gw);
	if(!err)
		xil_printf("Invalid default gateway address: %d\r\n", err);
}

void network_thread(void *p)
{
#if LWIP_DHCP==1
	int mscnt = 0;
#endif
	/* the mac address of the board. this should be unique per board */
	u8_t mac_ethernet_address[] = { 0x00, 0x0a, 0x35, 0x00, 0x01, 0x02 };

	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(&server_netif, NULL, NULL, NULL, mac_ethernet_address,
		PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\r\n");
		return;
	}

	netif_set_default(&server_netif);

	/* specify that the network if is up */
	netif_set_up(&server_netif);

	/* start packet receive thread - required for lwIP operation */
	sys_thread_new("xemacif_input_thread",
			(void(*)(void*))xemacif_input_thread, &server_netif,
			THREAD_STACKSIZE, DEFAULT_THREAD_PRIO);

	complete_nw_thread = 1;

#if LWIP_DHCP==1
	dhcp_start(&server_netif);
	while (1) {
		vTaskDelay(DHCP_FINE_TIMER_MSECS / portTICK_RATE_MS);
		dhcp_fine_tmr();
		mscnt += DHCP_FINE_TIMER_MSECS;
		if (mscnt >= DHCP_COARSE_TIMER_SECS*1000) {
			dhcp_coarse_tmr();
			mscnt = 0;
		}
	}
#else
	vTaskDelete(NULL);
#endif
}

int main_thread()
{
#if LWIP_DHCP==1
	int mscnt = 0;
#endif

#ifdef XPS_BOARD_ZCU102
	IicPhyReset();
#endif
	xil_printf("\n\r\n\r");
	xil_printf("-----lwIP Socket Mode UDP Server Application------\r\n");

	/* initialize lwIP before calling sys_thread_new */
	lwip_init();

	/* any thread using lwIP should be created using sys_thread_new */
	sys_thread_new("nw_thread", network_thread, NULL,
			THREAD_STACKSIZE, DEFAULT_THREAD_PRIO);

	while(!complete_nw_thread)
		usleep(50);

#if LWIP_DHCP==1
	while (1) {
		vTaskDelay(DHCP_FINE_TIMER_MSECS / portTICK_RATE_MS);
		if (server_netif.ip_addr.addr) {
			xil_printf("DHCP request success\r\n");
			break;
		}
		mscnt += DHCP_FINE_TIMER_MSECS;
		if (mscnt >= 10000) {
			xil_printf("ERROR: DHCP request timed out\r\n");
			assign_default_ip(&(server_netif.ip_addr),
						&(server_netif.netmask),
						&(server_netif.gw));
			break;
		}
	}

#else
	assign_default_ip(&(server_netif.ip_addr), &(server_netif.netmask),
				&(server_netif.gw));
#endif

	print_ip_settings(&(server_netif.ip_addr), &(server_netif.netmask),
				&(server_netif.gw));
	xil_printf("\r\n");

	/* print all application headers */
	print_app_header();
	xil_printf("\r\n");

	/* start the application*/
	start_application();

	vTaskDelete(NULL);
	return 0;
}

/* ------HDM-----*/
static void ReadCallBack(void *CallbackRef, u32 Mask)
{

	//static int i=0;
	/* User can add his code in this call back function */
	/*
	xil_printf("Read Call back function is called\r\n");
	if(i==0){
		memset(Buffer,0x00,FrameSize);
		i=1;
	}
	else{
		memset(Buffer,0xff,FrameSize);
		i=0;
	}
	Xil_DCacheFlush();
	sleep(1);
	*/
}

static int SetupIntrSystem(XAxiVdma *AxiVdmaPtr, u16 ReadIntrId)
{
	int Status;
	XScuGic *IntcInstancePtr =&Intc;

	/* Initialize the interrupt controller and connect the ISRs */
	XScuGic_Config *IntcConfig;
	IntcConfig = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
	Status =  XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);
	if(Status != XST_SUCCESS){
		xil_printf("Interrupt controller initialization failed..");
		return -1;
	}

	Status = XScuGic_Connect(IntcInstancePtr,ReadIntrId,(Xil_InterruptHandler)XAxiVdma_ReadIntrHandler,(void *)AxiVdmaPtr);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed read channel connect intc %d\r\n", Status);
		return XST_FAILURE;
	}

	XScuGic_Enable(IntcInstancePtr,ReadIntrId);

	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,(Xil_ExceptionHandler)XScuGic_InterruptHandler,(void *)IntcInstancePtr);
	Xil_ExceptionEnable();

	/* Register call-back functions
	 */
	XAxiVdma_SetCallBack(AxiVdmaPtr, XAXIVDMA_HANDLER_GENERAL, ReadCallBack, (void *)AxiVdmaPtr, XAXIVDMA_READ);

	XAxiVdma_SetCallBack(AxiVdmaPtr, XAXIVDMA_HANDLER_ERROR, ReadErrorCallBack, (void *)AxiVdmaPtr, XAXIVDMA_READ);

	return XST_SUCCESS;
}

static void ReadErrorCallBack(void *CallbackRef, u32 Mask)
{
	/* User can add his code in this call back function */
	xil_printf("Read Call back Error function is called\r\n");

}

void drawGrid(unsigned char* buffer) {

	xil_printf("Entering drawGrid\n");
	memcpy(TempBuffer, buffer, FrameSize);
    // Vul de buffer met wit
    for (int i = 0; i < VSize; ++i) {
        for (int j = 0; j < HSize * 3; j = j + 3) {
        	TempBuffer[(i * HSize * 3) + j] = 0xff;     // G
            TempBuffer[(i * HSize * 3) + j + 1] = 0xff; // B
            TempBuffer[(i * HSize * 3) + j + 2] = 0xff; // R
        }
    }

    // Teken horizontale lijnen
    for (int i = 1; i <= vierOpEenRij - 1; ++i) {
        int yPos = i * CellHeight - 5; // Aanpassen voor centrering van de lijn
        for (int j = 0; j < HSize * 3; j = j + 3) {
        	TempBuffer[(yPos * HSize * 3) + j] = 0x00;     // G (zwart)
        	TempBuffer[(yPos * HSize * 3) + j + 1] = 0x00; // B (zwart)
        	TempBuffer[(yPos * HSize * 3) + j + 2] = 0x00; // R (zwart)
        }
    }

    // Teken verticale lijnen
    for (int i = 1; i <= vierOpEenRij - 1; ++i) {
        int xPos = i * CellWidth - 5; // Aanpassen voor centrering van de lijn
        for (int j = 0; j < VSize; ++j) {
        	TempBuffer[(j * HSize * 3) + (xPos * 3)] = 0x00;     // G (zwart)
        	TempBuffer[(j * HSize * 3) + (xPos * 3) + 1] = 0x00; // B (zwart)
        	TempBuffer[(j * HSize * 3) + (xPos * 3) + 2] = 0x00; // R (zwart)
        }
    }
    memcpy(buffer, TempBuffer, FrameSize);
    xil_printf("Exiting drawGrid\n");
}

void drawToken() {

	unsigned char Buffer[FrameSize];
	unsigned char TempBuffer[FrameSize];

	int CheckRooster[4] = {0, 0, 0, 0};
	int WinnerCheck[17];
	int positionPlayer1 = 0;
	int positionPlayer2 = 0;


	xil_printf("Entering drawtoken\n");
	drawGrid(Buffer);
    memcpy(TempBuffer, buffer, FrameSize);

	updateStartPosition();

    // Teken de token voor op de positie van speler 1
    int xStartX = (positionPlayer1 % vierOpEenRij) * CellWidth;
    int yStartX = (positionPlayer1 / vierOpEenRij) * CellHeight;
    int halfCellWidthX = CellWidth / 2;
    int halfCellHeightX = CellHeight / 2;
    int startX_X = xStartX + (CellWidth - halfCellWidthX) / 2;
    int startY_X = yStartX + (CellHeight - halfCellHeightX) / 2;
    for (int i = 0; i < halfCellHeightX; ++i) {
        for (int j = 0; j < halfCellWidthX; ++j) {
            int bufferIndex = ((startY_X + i) * HSize + (startX_X + j)) * 3;
            TempBuffer[bufferIndex] = 0xff;     // G (zwart)
            TempBuffer[bufferIndex + 1] = 0x00; // B (zwart)
            TempBuffer[bufferIndex + 2] = 0xff; // R (zwart)
        }
    }

    // Teken de token voor op de positie van speler 2
    int xStartO = (positionPlayer2 % vierOpEenRij) * CellWidth;
    int yStartO = (positionPlayer2 / vierOpEenRij) * CellHeight;
    int halfCellWidthO = CellWidth / 2;
    int halfCellHeightO = CellHeight / 2;
    int startX_O = xStartO + (CellWidth - halfCellWidthO) / 2;
    int startY_O = yStartO + (CellHeight - halfCellHeightO) / 2;
    for (int i = 0; i < halfCellHeightO; ++i) {
        for (int j = 0; j < halfCellWidthO; ++j) {
            int bufferIndex = ((startY_O + i) * HSize + (startX_O + j)) * 3;
            TempBuffer[bufferIndex] = 0x00;     // G (zwart)
            TempBuffer[bufferIndex + 1] = 0x00; // B (zwart)
            TempBuffer[bufferIndex + 2] = 0xff; // R (zwart)
        }
    }

    WinnerCheck[positionPlayer1]=1;
    WinnerCheck[positionPlayer2]=2;
    WinOrNot(TempBuffer);

    memcpy(buffer, TempBuffer, FrameSize);
    xil_printf("exiting drawtoken\n");

}

void updateStartPosition() {
	xil_printf("start updatepos\n");
    if (positionPlayer1 >= 0 && positionPlayer1 < 4) {
        if (CheckRooster[positionPlayer1] == 0) {
        	CheckRooster[positionPlayer1] += 1;
        	positionPlayer1 +=12;
        }
        else if (CheckRooster[positionPlayer1] == 1) {
        	CheckRooster[positionPlayer1] += 1;
        	positionPlayer1 +=8;
        }
        else if (CheckRooster[positionPlayer1] == 2) {
        	CheckRooster[positionPlayer1] += 1;
        	positionPlayer1 +=4;
        }
        else if (CheckRooster[positionPlayer1] == 3) {
        	CheckRooster[positionPlayer1] += 1;
        	//waarde blijft 0
        }
        else{
        	xil_printf("value must be 0 till 3, value is now:%d\r\n", positionPlayer1);
        }
    }

    if (positionPlayer2 >= 0 && positionPlayer2 < 4) {
        if (CheckRooster[positionPlayer2] == 0) {
        	CheckRooster[positionPlayer2] += 1;
        	positionPlayer2 +=12;
        }
        else if (CheckRooster[positionPlayer2] == 1) {
        	CheckRooster[positionPlayer2] += 1;
        	positionPlayer2 +=8;
        }
        else if (CheckRooster[positionPlayer2] == 2) {
        	CheckRooster[positionPlayer2] += 1;
        	positionPlayer2 +=4;
        }
        else if (CheckRooster[positionPlayer2] == 3) {
        	CheckRooster[positionPlayer2] += 1;
        	//waarde blijft 0
        }
        else{
        	xil_printf("value must be 0 till 3, value is now:%d\r\n", positionPlayer2);
        }
    }
    xil_printf("exiting updatepos\n");
}

void WinOrNot(unsigned char* TempBuffer) {

	xil_printf("Entering winlose\n");
	//check alle horizontale lijnen player1
	for (int i = 0; i <= 12; i+=4) {
		if (WinnerCheck[i]==1 && WinnerCheck[i+1] ==1 && WinnerCheck[i+2]==1 && WinnerCheck[i+3]==1){
			WinnerCheck[16] = 1;
		}
	}
	//check alle horizontale lijnen player2
	for (int i = 0; i <= 12; i+=4) {
		if (WinnerCheck[i]==2 && WinnerCheck[i+1] ==2 && WinnerCheck[i+2]==2 && WinnerCheck[i+3]==2){
			WinnerCheck[16] = 2;
		}
	}
	//check alle verticale lijnen player1
	for (int i = 0; i <= 4; i++) {
		if (WinnerCheck[i]==1 && WinnerCheck[i+4] ==1 && WinnerCheck[i+8]==1 && WinnerCheck[i+12]==1){
			WinnerCheck[16] = 1;
		}
	}
	//check alle verticale lijnen player2
	for (int i = 0; i <= 4; i++) {
		if (WinnerCheck[i]==2 && WinnerCheck[i+4] ==2 && WinnerCheck[i+8]==2 && WinnerCheck[i+12]==2){
			WinnerCheck[16] = 2;
		}
	}
	//diagonaal
	if (WinnerCheck[0] == 1 && WinnerCheck[5] == 1 && WinnerCheck[10] == 1 && WinnerCheck[15] == 1 ){
		WinnerCheck[16] = 1;
	}
	if (WinnerCheck[0] == 2 && WinnerCheck[5] == 2 && WinnerCheck[10] == 2 && WinnerCheck[15] == 2 ){
		WinnerCheck[16] = 2;
	}
	if (WinnerCheck[3] == 1 && WinnerCheck[6] == 1 && WinnerCheck[9] == 1 && WinnerCheck[12] == 1 ){
		WinnerCheck[16] = 1;
	}
	if (WinnerCheck[3] == 2 && WinnerCheck[6] == 2 && WinnerCheck[9] == 2 && WinnerCheck[12] == 2 ){
		WinnerCheck[16] = 2;
	}

	if (WinnerCheck[16] == 1){
		xil_printf("winner is player 1\r\n");
		drawWinningSquare(TempBuffer, 1);
	}
	if (WinnerCheck[16] == 2){
		xil_printf("winner is player 2\r\n");
		drawWinningSquare(TempBuffer, 2);
	}
	xil_printf("exit winlose\n");
}

void drawWinningSquare(unsigned char* buffer, int color) {

	xil_printf("Entering drawwin\n");

	memcpy(TempBuffer, buffer, FrameSize);

    int centerX = HSize / 2;
    int centerY = VSize / 2;
    int squareSize = 10; // Startgrootte van het vierkant


    // Loop om het vierkant te tekenen en te laten groeien
    for (int size = squareSize; size < 100; size += 5) {
        for (int i = -size / 2; i < size / 2; ++i) {
            for (int j = -size / 2; j < size / 2; ++j) {
                int x = centerX + i;
                int y = centerY + j;
                if (x >= 0 && x < HSize && y >= 0 && y < VSize) {
                    int bufferIndex = (y * HSize + x) * 3;
                    if (color == 1) {
                        // Geel vierkant
                    	TempBuffer[bufferIndex] = 0xff;     // G
                        TempBuffer[bufferIndex + 1] = 0xff; // B
                        TempBuffer[bufferIndex + 2] = 0x00; // R
                    } else {
                        // Rood vierkant
                    	TempBuffer[bufferIndex] = 0x00;     // G
                    	TempBuffer[bufferIndex + 1] = 0x00; // B
                    	TempBuffer[bufferIndex + 2] = 0xff; // R
                    }
                }
            }
        }
        // Kopieer het buffer naar het scherm na elke verandering
        // Hier kun je eventueel een kleine vertraging toevoegen
        memcpy(Buffer, buffer, FrameSize);
        // Ververs het scherm
        Xil_DCacheFlush();
    }
	xil_printf("exit drawwin\n");
}

void testQueue(void *pvParameters) {
	char udp_msg[1500];
	if (xQueueReceive(udp_control, udp_msg, portMAX_DELAY) == pdTRUE) {
			xil_printf("test queue: %s", udp_msg);
			sscanf(udp_msg, "player1: %d ; player2: %d",
							&(positionPlayer1), &(positionPlayer2));
			xil_printf("test pl1: %d\r\n", positionPlayer1);
			xil_printf("test pl2: %d\r\n", positionPlayer2);

			drawToken(Buffer);
	}
	else
	{
			xil_printf("Queue is empty.\n");
	}

}

/* ------------------ */


